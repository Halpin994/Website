@model IEnumerable<MvcWebsite.Models.CommentModel>

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Projects</title>
</head>
<body>

    <div>
        <div align="center">
            <fieldset>
                <h3>Projects</h3>
            </fieldset>
            <br />
            <p style="padding: 10px; background-color: #333333; color: white; border: #111111 2px solid; font-size:22px; border-radius: 3px 4px">
                ASP.NET MVC Website
            </p>
            <p>
                (Code snippets will not display correctly for mobile viewers as the screen is too small, resulting in line breaks)
            </p>
            <br />
            <h4>• The Website <a href='http://conorhalpin.com:8080/job/MvcWebsite/'><img src='http://35.161.104.133:8080/job/MvcWebsite/badge/icon'></a></h4>
        </div>
        <p>
            This website was built in order to practice .NET web development, backend development and showcase my work. I chose the MVC design pattern for my website as it seems to be very popular and in demand at the moment. It also provides a number of advantages over the use of other design patterns. The MVC design pattern separates the components of the website into 3 parts called the Model, View and Controller. I started out by completing a Movie Database tutorial. From there I started building my website and deleted any items associated with the Movie DB which I no longer needed.
        </p>
        <p><b>Model</b></p>
        <p>
            The Model represents the data inside the website, it is written in C#. This website has a model for the comments. It defines a comment as an object that has an id, user name, name of the page (view) the comment was posted on and finally the comment itself. Models know nothing about the Views or Controllers. This is advantageous as the model can be reusable without modification. If the comments held a profile picture I could create a view that displays the comments with just usernames. I could also create a view which displays the comments with just a profile picture if it was requested by the project lead. This can be done without changing the comment model, making it very reusable.
        </p>
        <p><b>View</b></p>
        <p>
            The View represents the actual page we are looking at written in cshtml which is kind of a mashup of C# and HTML. It determines how the page is displayed. It also sends user input to the controller. So If I am currently on the Index page and want to view the Projects page, I click the link to the Projects page. The view tells the controller to display the Projects view. The controller then provides us with the Project view. C# html supports server side code whereas raw html does not. Because of this, comments are loaded when the view is requested. They are not hard coded into the webpage.
        </p>
        <p><b>Controller</b></p>
        <p>
            The Controller provides the model data to the view, it is written in C#. It also handles the user input which the view sends to it. The controller is dependent on the view and model. How it works with the model and view components: The controller is told load the Index page. It gets the comments and sends them to the view. Then displays the view.
        </p>
        <br />
        <div align="center"><h4>• Automatic Deployment System</h4></div>
        <p>
            Having to manually deploy a website to a server each time a change is made is not efficient or necessary. Manual deployments are dangerous and prone to errors. Without automation, deployment is delayed because it takes time and is unreliable. More features and commits in a deployment means more potential issues. I decided to automatically deploy the website because of this.
        </p>
        <p><b>Github</b> - <a href="https://github.com/Halpin994/Website">Repo</a></p>
        <p>
            I began by creating a simple website using the MVC design pattern. I pushed this up to my github so it had a repository online which will be very important to this system later on. Github provides a number of useful services besides this, including the use of branches. Which are used to safely implement new features.
        </p>
        <p><b>Jenkins</b> - <a href="http://www.conorhalpin.com:8080">Dashboard</a></p>
        <p>
            Jenkins is an automation service for continuous deployment which accelerates the development process. In the beginning I linked Jenkins to the location of MSBuild.exe on my local system so it can later build my project. I then created a job. Each job has its own workspace and is basically a list of tasks you want Jenkins to perform. The job was set to poll my github repo every 2 minutes to check for any changes. If a change is detected, the job will pull down the repo into the workspace folder specific to the job.
        </p>
        <p>
            After the project has been pulled down I need to generate the package, bin and obj folders again as I stopped commiting them to github because it is unnecessary. Nuget does this for us in visual studio so I downloaded the nuget.exe and added a build step windows batch command, the command links to the location of the nuget.exe then runs a restore on the project solution which I specify by quoting its location.
        </p>
        <p>
            Once the nuget restore has been performed a build step will attempt to build the project using the solution file in the project and MSBuild.exe. This removes the need to use Visual Studio to build the project on a server for example. Jenkins had to be linked to the latest MSBuild provided with .Net v4.5 as my application uses .Net v4.5 features.
        </p>
        <p><b>IIS 7</b></p>
        <p>
            IIS 7 is a web server created by Microsoft. I use this to serve my website through a predefined port. An application pool was created in IIS which supports the use of .Net v4.0. I then added my site to the list of websites. It was set up by specifying the application pool I want to use and the physical path of my website. This was linked to the project in the Jenkins workspace and not the project located in my Visual Studio Projects folder. The application pool had to be set to enable 32 bit applications before it would serve my website successfully. I could now see my website through localhost:(port number) in my browser.
        </p>
        <p>
            I tested the system by making a visible change to the website, pushing it up to my repo and waiting for Jenkins to detect it. After it detected the change, it pulled it down and built it. IIS was already pointing at the workspace so all I had to do then was refresh my page and I could see the change I made. Now that I knew I could successfully set the system up I decided to host the website somewhere else other than my own computer.
        </p>
        <p><b>Amazon Web Services - EC2 server</b></p>
        <p>
            I chose to use amazon web services to host my website as they provide an EC2 server for free for the first year. The EC2 server is an external computer I can connect to and use through my computer. Once I had my EC2 server running I proceeded to install the latest .Net framework, Jenkins and IIS 7. These were set up the same as before. I then forwarded the ports which IIS is serving the website through and also the port which Jenkins is served through. This enables me to modify and view Jenkins services from my local machine provided I am signed in.
        </p>
        <p><b>Downstream Project</b></p>
        <p>
            A second job was created on Jenkins to build my website. A post build step was added to the first jenkins job to trigger the second job only if its build is successful. The second job does not poll my repo for changes. If the first job's build is successful, the second job pulls down the repo and builds it again into another workspace. IIS was then modified to point at this workspace to prevent an unsuccessful build from breaking the website. Now only the latest working build will be served.
        </p>
        <p><b>Domain</b></p>
        <p>
            The domain conorhalpin.com was purchased and then pointed at my EC2 servers IP address along with the port IIS is constantly serving the website through.
        </p>
        <br />
        <div align="center"><h4>• Jenkins Plugins</h4></div>
        <p>
            A plugin was installed in Jenkins which enables me to embed the current build status of whatever job I choose. I used the first job of the website for the website plugin because the status of the second will always be successful. If you click on the plugin at the top of this page you will be taken to the job page associated with the website. You can also see and click the plugin for the Message Broker service below. There you can view the changes I have made through github commits and the build history.
        </p>
        <br />
        <div align="center"><h4>• Dependancy Injection</h4></div>
        <p>
            In Dependancy Injection a dependancy is just another class that an object requires to function. The dependancies are instantiated in a container and then injected into the object which requires it. This avoids having to instantiate the dependacy inside the object which requires it every time it is used, thus decoupling the object from it's dependancy. Now, when using this object in multiple places in my code, the dependancies are not created each time it is used. The object checks the container to see if the dependancy is already created, it then gets the dependancy injected into it for use.
        </p>
        <p><b>Autofac</b></p>
        <p>
            Autofac is an inversion of control container for .Net which manages the dependacies of classes so that my website can stay easy to change as it grows in size and complexity. I installed the Autofac package through Nuget package manager console in Visual Studio. The command is simply "Install-Package Autofac".
        <p />
        <p>
            Inside the Startup class is where Autofac works. This step is completed after settings is created. Which will be explained below.
            <br />
            Here I create a container builder.
        </p>
        <pre style="word-wrap:break-word">
var builder = new ContainerBuilder();
        </pre>
        <p>
            I then register the controllers and types like so. As you can see WebsiteSettings is registered as a ISettings type and created as an instance for use.
        </p>
        <pre style="word-wrap:break-word">
builder.RegisterControllers( typeof(MvcApplication).Assembly);
builder.RegisterType&lt;WebsiteSettings>().As&lt;ISettings>().SingleInstance();
        </pre>
        <p>
            Finally I set the containers contents to the built instances of each type. The dependacny resolver is then set to Autofac.
        </p>
        <pre style="word-wrap:break-word">
var container = builder.Build();
DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
        </pre>
        <p><b>Interfaces</b></p>
        <p>
            Instead of using a class, I use interfaces for each object. This is because the interface can be used without knowing how it works. It can have multiple dependancies. As long as the dependancy satisfies the requirements of the interface, it can be used. This allows for easily adjustable code. Passing interfaces with the bare minimum public properties and methods helps ensure we have properly encapsulated the interfaced class.
        </p>
        <p>
            Let's say our interface is the interface on a drinks machine which has no glass on it. As long as we know how to use the interface we can operate the drinks machine without knowing how it works. You put your money in, push a button to indicate which drink you want and the machine will give it to you. The dependancy of this interface is what determines how the machine works behind the interface. The operator of the interface does not know how it works behind the interface, it doesn't matter to the operator. This is what is called decoupling. The dependancy could just be a robot that counts your money, checks which button you pressed and grabs the drink you want then puts it in the tray. Maybe we don't like how that works and want to test a different method of getting the drinks. Let's say we have another location for the exotic drinks on the interface. Instead of changing how the dependancy works to get the drinks. We can just use another dependancy to tell the robot to get certain drinks from another location. It still doesn't matter to the operator of the interface how the drink is delivered to them, as long as they can use the interface, the machine will decide itself how to get the drink based on its dependancies.
        </p>
        <br />
        <div align="center"><h4>• Settings</h4></div>
        <p>
            Settings are used to store and get the location of certains things such as the path to the log file on my computer which I want to write logs to.
        </p>
        <p>
            To create the settings object I created an interface called "ISettings". This contains a getter for strings I want. I then created the "WebsiteSettings" class which inherits the ISettings interface and also sets the strings. I put the definition of each string inside the web config file in my project so if I want/need to change one I don't need to change the code and build the entire project again.
        </p>
        <p>
            Here is an example of my Settings interface.
        </p>
            <pre style="word-wrap:break-word">
namespace MvcWebsite.Settings
{
    public interface ISettings
    {
        string logPath { get;}
        string hostUri { get;}
        string commentApiPath { get; }
    }
}
            </pre>
        <p>
            As you can see the interface has nothing to do with how it gets these strings, this is determined by the class implementing the interface.
        </p>
            <pre style="word-wrap:break-word">
using System.Configuration;
                
namespace MvcWebsite.Settings
{
    public class WebsiteSettings : ISettings
    {
        public string logPath { get; private set; }
        public string hostUri { get; private set; }
        public string commentApiPath { get; private set; }
                
        public WebsiteSettings()
        {
            logPath = ConfigurationManager.AppSettings["LogPath"].ToString();
            hostUri = ConfigurationManager.AppSettings["HostUri"].ToString();
            commentApiPath = ConfigurationManager.AppSettings["CommentApiPath"].ToString();
        }
    }
}
            </pre>
        <p>
            Here we can see how the website settings class gets the values of the strings from the webconfig file using their key identifier. These values are stored like so inside this file.
        </p>
        <pre style="word-wrap:break-word">
&lt;appsettings>
&lt;add key="LogPath" value="C:\logs\websitelogs.txt" />
&lt;add key="HostUri" value="http://localhost:8888" />
&lt;add key="commentApiPath" value="api/comments/" />
&lt;/appsettings>
        </pre>
        <br />
        <div align="center"><h4>• Logger</h4></div>
        <p>
            The logger is set up the same as the settings except it doesn't hold strings. It has a Log(string input) method in its interface which takes a string parameter. This string will be passed when used inside a controller to determine what is logged. Inside the ILogger's dependancy which is called "TextLogger" we use the ISettings interface to get the log file path from the webconfig using it's WebsiteSettings dependancy. Here, the settings are taken from the instance in the container and not created inside this class.
        </p>
        <p>
            Inside our ILogger dependancy we determine how the Log(string input) method works. I used a streamwriter which takes a parameter of the location of the log file. This is where I used the settings interface to get "settings.logPath". Now, "streamWriter.WriteLine(input);" can be used to log a line to the file inside the Log(string input) method. I had some difficulties getting the streamWriter to write on seperate lines each time but putting "streamWriter.Close();" inside the method seemed to fix that.
        </p>
        <pre style="word-wrap:break-word">
using MvcWebsite.Settings;

namespace MvcWebsite.Logger
{
    public class TextLogger : ILogger
    {
        private ISettings settings;

        public TextLogger(ISettings webSiteSettings)
        {
            settings = webSiteSettings;
        }
        public void Log(string input)
        {
            using (var streamWriter = new StreamWriter(settings.logPath, true))
            {
                streamWriter.WriteLine(input);
                streamWriter.Close();
            }
        }
    }
}
        </pre>
        <p>
            The logger was then resgistered inside the startup class just like the settings was before.
        </p>
        <pre style="word-wrap:break-word">
builder.RegisterType&lt;TextLogger>().As&lt;ILogger>().SingleInstance();
        </pre>
        <p>
            Now after getting the instance of the logger inside a controller we can use the following line of code to write text to the log file.
        </p>
        <pre style="word-wrap:break-word">
_logger.Log();
        </pre>
        <p>
            I decided to log the time, page and IP address of each visit to my website using the following line of code in each page's controller (this specific one is for the Projects page)
        </p>
        <pre style="word-wrap:break-word">
_logger.Log(String.Format("Time={0}, PageRequested={1}, RemoteIP={2}.", DateTime.Now, "Projects", Request.UserHostAddress)
        </pre>
        <p>
            At this time of writing, there are currently over 2000 logs of page visits to my website. Most of them by me but a lot of the visits were by friends and family also.
        </p>
        <br />
        <div align="center"><h4>• Comment System</h4></div>
        <p>
            The comment system consists of the components below. I created it to showcase the use of a model and a RESTful microserver which is a self hosted OWIN-based server.
        </p>
        <p><b>Comment Model</b></p>
        <p>
            The comment model is just a definition of what a comment should consist of. As you can see in this code snippet, the comment model consists of an integer Id and strings for user name, the webpage it was submitted to and the comment itself. It also contains a constructor which takes a value of type string and sets the webpage value to whatever is passed. When the create comment view is rendered on each page, it is passed the name of the webpage it is on. Then when a comment is created it's webpage is automatically set by the constructor.
        </p>
        <pre style="word-wrap:break-word">
public class CommentModel
{
    public int Id { get; set; }
    public string UserName { get; set; }
    public string Webpage { get; set; }
    public string Comment { get; set; }

    public CommentModel(){}

    public CommentModel(String webpage)
    {
        this.Webpage = webpage;
    }
}
        </pre>
        <p><b>Message Broker Service</b> <a href='http://www.conorhalpin.com:8080/job/MessageBroker/'><img src='http://www.conorhalpin.com:8080/job/MessageBroker/badge/icon'></a></p>
        <p>
            The message broker service consists of a webserver class shown below. This is used to stop and start the service. To get this working I had to get the NuGet package Microsoft.Owin.SelfHost. The port the service is run on will be used later in the MessageBrokerApi class in the website project to allow communication between the website and the service.
        </p>
            <pre style="word-wrap:break-word">
using Microsoft.Owin.Hosting;

public class Webserver
{
    private IDisposable _webApp;

    public void Start()
    {
        _webApp = WebApp.Start&lt;Startup>("http://localhost:8888");
    }
    public void Stop()
    {
        _webApp.Dispose();
    }
}
            </pre>
        <p>
            It also consists of a comment model the same as in the website but without the constructor, a comment controller which works with the comment controller and message broker api inside the webiste and finally the startup and program classes. The startup class is used to setup the default routing configuration.
        </p>
        <p><b>Topshelf & Automatic Delpoyment</b></p>
        <p>
            Topshelf was installed by inputting the following command "Install-Package Topshelf" into the NuGet package manager. Topshelf is a Windows service framework for the .NET platform. It makes it easy for me to install the application as a service automatically through jenkins, server side. This way it can run in the background and can be installed, uninstalled, stopped and started easily.
        </p>
        <p>
            As the message broker is a separate application to the website, it needs to be deployed server side so it will work. The automatic deployment system for this application is similar to the website in that it uses Jenkins but the actual deployment is very different.
        </p>
        <p>
            A job was created to pull down the message broker repo from github if there is a change. Then nuget was used to restore it's packages. It is then built, if successful it triggers a second job. The second job is used to deploy the service.
        </p>
        <p>
            I had some problems getting this second job to successfully stop and uninstall the previously installed service then install and start the newly built version. I believe this is because I was trying to run the application from inside the workspace using the compiled .exe located in the bin folder. To get around this I had to run the .exe from outside the workspace Jenkins builds the project into.
        </p>
        <p>
            The second job doesn't build the project, so it's workspace only contains two VBScripts which I use to manage the bin folder in the first jobs workspace. The first script is a zip script so I can zip up the bin folder.
        </p>
            <pre style="word-wrap:break-word">
'Get command-line arguments.
Set objArgs = WScript.Arguments
InputFolder = objArgs(0)
ZipFile = objArgs(1)

Const OverwriteExisting = TRUE

'Create empty ZIP file.
CreateObject("Scripting.FileSystemObject").CreateTextFile(ZipFile, True).Write "PK" & Chr(5) & Chr(6) & String(18, vbNullChar)

Set objShell = CreateObject("Shell.Application")

Set source = objShell.NameSpace(InputFolder)

objShell.NameSpace(ZipFile).CopyHere(source)

'Required!
wScript.Sleep 2000
            </pre>
        <p>
            The first build step of my deployment job is now
            <pre style="word-wrap:break-word">
CScript zip.vbs "C:\Program Files (x86)\Jenkins\workspace\MessageBroker\MessageBroker\bin" "C:\BrokerStorage\MessageBroker.zip"
            </pre>
            We can see in the script above we get the folder we want zipped and where we want to zip it to through two arguments. These two arguments are specified here and the script uses these to do what we want.
        </p>
        <p>
            The next step is to stop the currently installed service to prepare it for uninstallation.
            <pre style="word-wrap:break-word">
"C:\BrokerRun\bin\Debug\MessageBroker.exe" stop
            </pre>
            I then uninstall the service using
            <pre style="word-wrap:break-word">
"C:\BrokerRun\bin\Debug\MessageBroker.exe" uninstall
            </pre>
        </p>
        <p>
            Now I can begin installing the newly built service. For this I need to use a new script to unzip the bin file inside the brokerstorage folder. This is the script that is used to unzip the file.
        <pre style="word-wrap:break-word">
'Get command-line arguments.
Set objArgs = WScript.Arguments
ZipFile = objArgs(0)
ExtractTo = objArgs(1)

Set fso = CreateObject("Scripting.FileSystemObject")
sourceFile = fso.GetAbsolutePathName(ZipFile)
destFolder = fso.GetAbsolutePathName(ExtractTo)

Set objShell = CreateObject("Shell.Application")
Set FilesInZip=objShell.NameSpace(sourceFile).Items()
objShell.NameSpace(destFolder).copyHere FilesInZip, 16

Set fso = Nothing
Set objShell = Nothing
Set FilesInZip = Nothing
            </pre>
            The next build step is to use this script to unzip the zip file to a new location.
            <pre style="word-wrap:break-word">
CScript unzip.vbs "C:\BrokerStorage\MessageBroker.zip" "C:\BrokerRun"
            </pre>
           The last two steps are used to safely install the service
            <pre style="word-wrap:break-word">
C:\BrokerRun\bin\Debug\MessageBroker.exe" install
            </pre>
            and start it
            <pre style="word-wrap:break-word">
"C:\BrokerRun\bin\Debug\MessageBroker.exe" start
            </pre>
            That's it. Now my message broker will be automatically deployed as a service, server side, each time a change is made to its github repo.
        </p>
        <p><b>Message Broker Api</b></p>
        The message broker api is used to communicate with the message broker service. It is set up just like the settings and logger classes using an insterface and registering its type.
        <p>
            I use my settings instance to get the Uri address which my service runs at on the server.
        </p>
        <pre style="word-wrap:break-word">
public class MessageBrokerApi : IMessageBrokerApi
    {
        private ISettings settings;
        public MessageBrokerApi(ISettings webSiteSettings) //aka CommentClient()
        {
            settings = webSiteSettings;
        }
        </pre>
        Now I can create the client, give it the Uri address and the location of the comments stored in memory on the service.
        <pre style="word-wrap:break-word">
public HttpClient CreateClient()
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(new Uri(settings.hostUri), settings.commentApiPath);
        return client;
    }
        </pre>
        These values are stored in the Web.config file like so
        <pre style="word-wrap:break-word">
&lt;add key="HostUri" value="http://localhost:8888" />
&lt;add key="commentApiPath" value="api/comments/" />
        </pre>
        Next I created a GetComments() method to get all the comments on the service. There is a try catch set up around it so when I was testing other features in the website I didn't have to have the message broker running. Without this the site would crash if it couldn't get the comments.
        <pre style="word-wrap:break-word">
public IEnumerable&lt;commentmodel> GetComments()
{
    IEnumerable&lt;CommentModel> result = new List&lt;CommentModel>();
    try
    {
        HttpResponseMessage response;
        using (var client = CreateClient())
        {
            response = client.GetAsync(client.BaseAddress).Result;
        }
        result = response.Content.ReadAsAsync&lt;IEnumerable&lt;CommentModel>>().Result;
    }
    catch(Exception e)
    {
        //Log exception
    }
    return result;
}
</pre>
        All this does is uses this method in the service to get all the comments in the list.
        <pre style="word-wrap:break-word">
public IEnumerable&lt;CommentModel> Get()
{
    return _Db;
}
        </pre>
        I added another method called GetPageComments() to the api so I could just get the comments for certain pages passed without passing all the comment and sorting them in the view.
        <pre style="word-wrap:break-word">
public IEnumerable&lt;commentmodel> GetPageComments(string pageFilter)
{
    return GetComments().Where(comment => comment.Webpage.Equals(pageFilter));
}
        </pre>
        In the ProjectsController I can now use this line to get that pages comments.
        <pre style="word-wrap:break-word">
var pageComments = _messageBroker.GetPageComments("Projects");
</pre>
        All thats left to do is add the AddComment() method to the api and a Post() method to the message broker service and we can start posting comments once our Comment Controller is set up. The method looks like this.
        <pre>
public System.Net.HttpStatusCode AddComment(CommentModel comment)
{
    HttpResponseMessage response;
    using (var client = CreateClient())
    {
        response = client.PostAsJsonAsync(client.BaseAddress, comment).Result;
    }
    return response.StatusCode;
}
</pre>
        This communicates with the following Post method inside the Message Broker service.
        <pre class="word-wrap:break-word">
public IHttpActionResult Post(CommentModel comment)
        {
            if(comment == null)
            {
                return BadRequest("Argument Null");
            }
            comment.Id = _Db.Last().Id + 1;
            var commentExists = _Db.Any(c => c.Id == comment.Id);
            
            if(commentExists)
            {
                return BadRequest("Exists");
            }
            Console.WriteLine(String.Format("Id={0} WebPage={1} UserName={2} Comment={3}", comment.Id, comment.Webpage, comment.UserName, comment.Comment));
            
            _Db.Add(comment);
            return Ok();
        }
</pre>
        <p>
            All this does is takes in the comment if its not null, adds 1 to the id and adds it to the database. There is also a simple line to output the comment to the console when running the messagebroker.exe and not as a service. This was used for debugging purposes when comments were coming through as null.
        </p>
        <p><b>Comment Controller</b></p>
        Besides the constructor getting the instances of the Logger and message broker api. All the comment controller contains for now is a CreateComment() method which looks like this.
            <pre class="word-wrap:break-word">
[AcceptVerbs(HttpVerbs.Post)]
        public ActionResult CreateComment(CommentModel commentToCreate)
        {
            _logger.Log(String.Format("Time={0}, PageRequested={1}, RemoteIP={2}, UserNameSubmitted={3}, CommentSubmitted={4}.", 
            DateTime.Now, "Create Comment", Request.UserHostAddress,commentToCreate.UserName.ToString(), commentToCreate.Comment.ToString()));

            _messageBroker.AddComment(commentToCreate);
            switch(commentToCreate.Webpage)
            {
                case "Index":
                    return RedirectToAction(commentToCreate.Webpage,"Home");
                case "Projects":
                    return RedirectToAction(commentToCreate.Webpage,"Projects");
                case "ContactMe":
                    return RedirectToAction(commentToCreate.Webpage,"Contact");
                default:
                    return RedirectToAction("Index","Home");
            }
        }
</pre>
            This uses the AddComment() method in the api to post the comment to the service. Then I have a switch case set up so when a comment is posted it will check the webpage value of the comment that was just submitted and then redirect the user to the page they are on. So it basically just refreshes the page so the user can see their newly submitted comment.
        </p>
        <p><b>Create Comment View</b></p>
            The create comment view is a html form with two text boxes for Username and Comment. I have set character limits on both.
            <pre style="word-wrap:break-word">
&#x40;model MvcWebsite.Models.CommentModel
&#x40;using (Html.BeginForm("CreateComment", "Comment", FormMethod.Post, new { id = "commentForm" }))
{
        &lt;fieldset>
        &#x40;Html.HiddenFor(newComment => newComment.Id)
        &#x40;Html.HiddenFor(newComment => newComment.Webpage)
        &lt;p>Username&lt;/p>
        &lt;p>&#x40;Html.TextBoxFor(newComment => newComment.UserName, new { style = "width:100%", &#x40;maxlength = "14" })&lt;/p>
        &lt;p>Comment&lt;/p>
        &lt;p>&#x40;Html.TextBoxFor(newComment => newComment.Comment, new { style = "width:100%", &#x40;maxlength = "250" })&lt;/p>
        &lt;p>&lt;input type="submit" value="Submit" class="btn btn-default" />&lt;/p>
        &lt;/fieldset>
}
            </pre>
            As you can see I am using lambda functions which use the "=>" operator to simplify the code. The compiler figures out the return type and the param type automatically because the HTML helper passes the model and property type to the HTML.TextBoxFor() method. When the submit button is hit, I use the CreateComment() method inside the comment controller to send the comment to my message broker api. Which then posts it to the message broker application to be submitted into the list of comments store...(line truncated)...
            <p>
                In each view we use this line of code to render the create comment view inside the page. This one is specific for the Projects page. As we can see, the string "Projects" is passed to be used by the comment model constructor to set the webpage the comment is submitted on.
                <pre style="word-wrap:break-word">
&#x40;{Html.RenderPartial("~/Views/Comment/CreateComment.cshtml", new MvcWebsite.Models.CommentModel("Projects"));}
                </pre>
                When rendering the create comment view on the contact me page for example the code would simply be
                <pre style="word-wrap:break-word">
&#x40;{Html.RenderPartial("~/Views/Comment/CreateComment.cshtml", new MvcWebsite.Models.CommentModel("ContactMe"));}
                </pre>
            </p>
<p><b>Comment List View</b></p>
<p>
    Inside each pages controller we get the comments for that page and return them to the view to be displayed. This expample is specific to the projects page.
    <pre style="word-wrap:break-word">
var pageComments = _messageBroker.GetPageComments("Projects");
return View(pageComments);
            </pre>
    This is what the actual view for the CommentList looks like. As you can see all it does is lists out each comments Username and Comment. It doesn't need to sort which comments it needs as they have already been sorted in the message broker. I define the model the view accepts at the top as shown. It uses the IEnumerable type so I can use the foreach operator.
    <pre style="word-wrap:break-word">
&#x40;model IEnumerable&lt;MvcWebsite.Models.CommentModel>
&#x40;foreach (var item in Model)
{
    &lt;fieldset>
    &lt;b>&#x40;item.UserName:&lt;/b>&#x40;item.Comment
    &lt;/fieldset>
}
            </pre>
            Finally, inside the project view we use the following line of code to render the comment list view inside the projects page.
            <pre style="word-wrap:break-word">
&#x40;{Html.RenderPartial("~/Views/Comment/CommentList.cshtml");}
            </pre>
        </p>
        <br />
        <div align="center">
            <p style="padding: 10px; background-color: #333333; color: white; border: #111111 2px solid; font-size:22px; border-radius: 3px 4px">
                The Academy - Final Year Project
            </p>
        </div>
        <div align="center"><h4>• First person target shooting game</h4></div>
        <style>
            .embed-container {
                position: relative;
                padding-bottom: 56.25%;
                height: 0;
                overflow: hidden;
                max-width: 100%;
            }

                .embed-container iframe,
                .embed-container object, .embed-container embed {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                }
        </style>
        <div class='embed-container'><iframe src='https://www.youtube.com/embed/sf2liWaX2Rw' frameborder='0' allowfullscreen></iframe></div>
    </div>

    <fieldset>
        <legend>Comments</legend>
        @{Html.RenderPartial("~/Views/Comment/CreateComment.cshtml", new MvcWebsite.Models.CommentModel("Projects"));}
        @{Html.RenderPartial("~/Views/Comment/CommentList.cshtml");}
    </fieldset>

</body>
</html>